Index: src/santorini/screens/GameScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package santorini.screens;\r\n\r\nimport santorini.board.Board;\r\nimport santorini.board.BoardGUI;\r\nimport santorini.engine.Game;\r\nimport santorini.engine.Player;\r\nimport santorini.godcards.GodCard;\r\nimport santorini.godcards.GodCardDeck;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\npublic class GameScreen implements Screen {\r\n\r\n  private JPanel panel = new JPanel(new BorderLayout());\r\n  private boolean setupDone = false;\r\n  private GodCardDeck godCardDeck;\r\n  public static JTextArea gameLog;\r\n\r\n  public GameScreen(GodCardDeck godCardDeck) {\r\n    this.godCardDeck = godCardDeck;\r\n  }\r\n\r\n  @Override\r\n  public JPanel getPanel() {\r\n    return panel;\r\n  }\r\n\r\n  public void startGameSetup() {\r\n    if (setupDone) return;\r\n    setupDone = true;\r\n    setupGame();\r\n  }\r\n\r\n  private void setupGame() {\r\n    // Setup players\r\n    String name1 = askName(\"Player 1\");\r\n    String name2 = askName(\"Player 2\");\r\n\r\n    Player player1 = new Player(name1);\r\n    Player player2 = new Player(name2);\r\n\r\n    godCardDeck.shuffle();\r\n\r\n    GodCard player1Card = godCardDeck.draw();\r\n    GodCard player2Card = godCardDeck.draw();\r\n\r\n    player1.setGodCard(player1Card);\r\n    player2.setGodCard(player2Card);\r\n\r\n    showCardAssignment(player1);\r\n    showCardAssignment(player2);\r\n\r\n    // Setup board and logic\r\n    Board board = new Board(5,5);\r\n    Game.initializeGame(player1, player2, board);\r\n    Game.getCurrentPlayer().getGodCard().onTurnStart();\r\n\r\n    java.util.List<Point> emptySpots = new java.util.ArrayList<>(); //Random placiong worker\r\n\r\n    for (int i = 0; i < board.getRows(); i++) {\r\n      for (int j = 0; j < board.getCols(); j++) {\r\n        if (board.getCell(i, j).getWorker() == null) {\r\n          emptySpots.add(new Point(i, j));\r\n        }\r\n      }\r\n    }\r\n\r\n    java.util.Collections.shuffle(emptySpots);\r\n\r\n    for (int i = 0; i < 2; i++) {\r\n      Point p = emptySpots.remove(0);\r\n      board.getCell(p.x, p.y).setWorker(player1);\r\n    }\r\n\r\n    for (int i = 0; i < 2; i++) {\r\n      Point p = emptySpots.remove(0);\r\n      board.getCell(p.x, p.y).setWorker(player2);\r\n    }\r\n\r\n    BoardGUI boardGUI = new BoardGUI(board);\r\n    JPanel boardPanel = boardGUI.getBoardPanel();\r\n\r\n    gameLog = new JTextArea(\"Game’s Log:\\n• \" + player1.getName() + \" starts the game...\");\r\n    gameLog.setEditable(false);\r\n    JScrollPane logScroll = new JScrollPane(gameLog);\r\n    logScroll.setPreferredSize(new Dimension(300, 120));\r\n\r\n    JPanel leftPanel = new JPanel(new BorderLayout());\r\n    leftPanel.add(boardPanel, BorderLayout.CENTER);\r\n    leftPanel.add(logScroll, BorderLayout.SOUTH);\r\n\r\n    // Right panel\r\n    JPanel rightPanel = new JPanel(new BorderLayout());\r\n    rightPanel.setPreferredSize(new Dimension(250, 0));\r\n    rightPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\r\n\r\n    JPanel godCardInfo = new JPanel();\r\n    godCardInfo.setLayout(new BoxLayout(godCardInfo, BoxLayout.Y_AXIS));\r\n    godCardInfo.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n    JLabel cardTitle = new JLabel(player1.getName() + \"’s Card\");\r\n    cardTitle.setFont(new Font(\"Arial\", Font.BOLD, 16));\r\n    cardTitle.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n    JLabel cardName = new JLabel(player1.getGodCard().getName());\r\n    cardName.setFont(new Font(\"Arial\", Font.PLAIN, 14));\r\n    cardName.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n    JLabel cardDescription = new JLabel(\"<html><div style='text-align:center;'>\" +\r\n            player1.getGodCard().getDescription() + \"</div></html>\");\r\n    cardDescription.setFont(new Font(\"Arial\", Font.PLAIN, 12));\r\n    cardDescription.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n    // Load and display the GodCard image\r\n    JLabel cardImageLabel = new JLabel();\r\n    updateCardImage(cardImageLabel, player1.getGodCard());\r\n\r\n    godCardInfo.add(cardTitle);\r\n    godCardInfo.add(Box.createVerticalStrut(10));\r\n    godCardInfo.add(cardName);\r\n    godCardInfo.add(Box.createVerticalStrut(10));\r\n    godCardInfo.add(cardDescription);\r\n    godCardInfo.add(Box.createVerticalStrut(10));\r\n    godCardInfo.add(cardImageLabel);\r\n\r\n    JPanel buttonPanel = new JPanel();\r\n    buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS));\r\n\r\n    JButton undoButton = new JButton(\"Undo\");\r\n    undoButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n    JButton endTurnButton = new JButton(\"End Turn\");\r\n    endTurnButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n    endTurnButton.setPreferredSize(new Dimension(100, 40));\r\n\r\n    endTurnButton.addActionListener(e -> {\r\n      Game.endTurn();\r\n\r\n      Player current = Game.getCurrentPlayer();\r\n      current.getGodCard().onTurnEnd();\r\n\r\n      cardTitle.setText(current.getName() + \"’s Card\");\r\n      cardName.setText(current.getGodCard().getName());\r\n      cardDescription.setText(\"<html><div style='text-align:center;'>\" +\r\n              current.getGodCard().getDescription() + \"</div></html>\");\r\n      updateCardImage(cardImageLabel, currentCard);\r\n      gameLog.append(\"\\n• \" + current.getGodCardName() + \"'s Turn\");\r\n    });\r\n\r\n    buttonPanel.add(Box.createVerticalGlue());\r\n    buttonPanel.add(undoButton);\r\n    buttonPanel.add(Box.createVerticalStrut(15));\r\n    buttonPanel.add(endTurnButton);\r\n    buttonPanel.add(Box.createVerticalGlue());\r\n\r\n    rightPanel.add(godCardInfo, BorderLayout.NORTH);\r\n    rightPanel.add(buttonPanel, BorderLayout.SOUTH);\r\n\r\n    panel.add(leftPanel, BorderLayout.CENTER);\r\n    panel.add(rightPanel, BorderLayout.EAST);\r\n  }\r\n\r\n  private void showCardAssignment(Player player) {\r\n    String cardName = player.getGodCard().getName();\r\n    String imagePath = \"images/GodCards/\" + cardName + \".jpg\";\r\n    ImageIcon icon = new ImageIcon(imagePath);\r\n\r\n    // Resize the image\r\n    Image image = icon.getImage();\r\n    Image newimg = image.getScaledInstance(450, 300,  java.awt.Image.SCALE_SMOOTH);\r\n    ImageIcon resizedIcon = new ImageIcon(newimg);\r\n\r\n    JLabel imageLabel = new JLabel(resizedIcon);\r\n    imageLabel.setAlignmentX(SwingConstants.CENTER);\r\n    imageLabel.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));\r\n\r\n    JPanel messagePanel = new JPanel();\r\n    messagePanel.setLayout(new BoxLayout(messagePanel, BoxLayout.Y_AXIS));\r\n    messagePanel.add(new JLabel(\"<html>\" + player.getName() + \", you have been assigned the God Card: <strong>\" + cardName + \"</strong><br></html>\"));\r\n    messagePanel.add(new JLabel(\"<html><br>Power:<br><strong>\" + player.getGodCard().getDescription() + \"</strong></html>\"));\r\n    messagePanel.add(imageLabel);\r\n\r\n    JOptionPane.showMessageDialog(\r\n            null,\r\n            messagePanel,\r\n            \"God Card Assignment\",\r\n            JOptionPane.INFORMATION_MESSAGE\r\n    );\r\n  }\r\n\r\n  private String askName(String prompt) {\r\n    String name;\r\n    do {\r\n      name = JOptionPane.showInputDialog(null, \"Enter \" + prompt + \" Name:\", \"Santorini\", JOptionPane.PLAIN_MESSAGE);\r\n    } while (name == null || name.trim().isEmpty());\r\n    return name.trim();\r\n  }\r\n\r\n  private void updateCardImage(JLabel label, GodCard card) {\r\n    String imagePath = card.getImagePath();\r\n    ImageIcon icon = new ImageIcon(imagePath);\r\n\r\n    // Resize the image\r\n    Image image = icon.getImage();\r\n    Image newimg = image.getScaledInstance(120, 200,  java.awt.Image.SCALE_SMOOTH);\r\n    icon = new ImageIcon(newimg);\r\n\r\n    label.setIcon(icon);\r\n  }\r\n\r\n  public static void logMessage(String message) {\r\n    if (gameLog != null) {\r\n      gameLog.append(\"\\n• \" + message);\r\n      gameLog.setCaretPosition(gameLog.getDocument().getLength()); // auto-scroll\r\n    }\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/santorini/screens/GameScreen.java b/src/santorini/screens/GameScreen.java
--- a/src/santorini/screens/GameScreen.java	(revision d30be70e0a110cb50cf1d37097e829ef67e67369)
+++ b/src/santorini/screens/GameScreen.java	(date 1746015608165)
@@ -144,7 +144,7 @@
       cardName.setText(current.getGodCard().getName());
       cardDescription.setText("<html><div style='text-align:center;'>" +
               current.getGodCard().getDescription() + "</div></html>");
-      updateCardImage(cardImageLabel, currentCard);
+      updateCardImage(cardImageLabel, current.getGodCard());
       gameLog.append("\n• " + current.getGodCardName() + "'s Turn");
     });
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"8a0881fb-7923-4384-b29a-306d18e6b59f\" name=\"Changes\" comment=\"Major Changes #3:&#10;- Implemented the logic of BuildAction to the main logic of the game.&#10;- The basic logic of the game is done except the winning condition and use of god cards.&#10;- GameLogicManager is to be changed soon due to it being god class.\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 3\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2wMGxS7ktC03PXPypgru7eTBov2\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.Main.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"GameLogic\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/Tom/IdeaProjects/Santorini\",\r\n    \"project.structure.last.edited\": \"Modules\",\r\n    \"project.structure.proportion\": \"0.0\",\r\n    \"project.structure.side.proportion\": \"0.0\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"8a0881fb-7923-4384-b29a-306d18e6b59f\" name=\"Changes\" comment=\"\" />\r\n      <created>1745844277284</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1745844277284</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Changes to major files:&#10;- Create child classes of Building abstract class&#10;- Create Action abstract and its action classes which are MoveAction, BuildAction and EndTurnAction.&#10;- Added BoardEventHandler for calling handleCellClick in logicManager.&#10;- Modified BoardGUI, Cell and Game classes&#10;- Added GameLogic and GameLogicManager classes for all the logic of the game.&#10;- Modified TurnManager to keep track of each turn.&#10;&#10;What will be improved:&#10;- Building action and moving action to be done while running.&#10;- Prevent god classes if needed.&#10;- Apply god cards ability into the game for both players.&#10;- Define winning requirement in the game logic.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1745860659137</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1745860659137</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Major Changes #2:&#10;- Implemented the move action of workers.&#10;- The game log displays the status of the game and each action that the players make.&#10;- The game stores turns and players can undo the move action.&#10;- Still working in progress on the build action.&#10;- Commented the GameLogic and TurnManager classes. These classes will be in use as soon as possible for OOP design since the GameLogicManager handles most of the logic and is deemed to become a god class.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1745944045029</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1745944045029</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Major Changes #3:&#10;- Implemented the logic of BuildAction to the main logic of the game.&#10;- The basic logic of the game is done except the winning condition and use of god cards.&#10;- GameLogicManager is to be changed soon due to it being god class.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1745951141882</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1745951141882</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Update .gitignore\" />\r\n    <MESSAGE value=\"Changes to major files:&#10;- Create child classes of Building abstract class&#10;- Create Action abstract and its action classes which are MoveAction, BuildAction and EndTurnAction.&#10;- Added BoardEventHandler for calling handleCellClick in logicManager.&#10;- Modified BoardGUI, Cell and Game classes&#10;- Added GameLogic and GameLogicManager classes for all the logic of the game.&#10;- Modified TurnManager to keep track of each turn.&#10;&#10;What will be improved:&#10;- Building action and moving action to be done while running.&#10;- Prevent god classes if needed.&#10;- Apply god cards ability into the game for both players.&#10;- Define winning requirement in the game logic.\" />\r\n    <MESSAGE value=\"Major Changes #2:&#10;- Implemented the move action of workers.&#10;- The game log displays the status of the game and each action that the players make.&#10;- The game stores turns and players can undo the move action.&#10;- Still working in progress on the build action.&#10;- Commented the GameLogic and TurnManager classes. These classes will be in use as soon as possible for OOP design since the GameLogicManager handles most of the logic and is deemed to become a god class.\" />\r\n    <MESSAGE value=\"Major Changes #3:&#10;- Implemented the logic of BuildAction to the main logic of the game.&#10;- The basic logic of the game is done except the winning condition and use of god cards.&#10;- GameLogicManager is to be changed soon due to it being god class.\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Major Changes #3:&#10;- Implemented the logic of BuildAction to the main logic of the game.&#10;- The basic logic of the game is done except the winning condition and use of god cards.&#10;- GameLogicManager is to be changed soon due to it being god class.\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision d30be70e0a110cb50cf1d37097e829ef67e67369)
+++ b/.idea/workspace.xml	(date 1746015608162)
@@ -4,8 +4,36 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="8a0881fb-7923-4384-b29a-306d18e6b59f" name="Changes" comment="Major Changes #3:&#10;- Implemented the logic of BuildAction to the main logic of the game.&#10;- The basic logic of the game is done except the winning condition and use of god cards.&#10;- GameLogicManager is to be changed soon due to it being god class.">
+    <list default="true" id="8a0881fb-7923-4384-b29a-306d18e6b59f" name="Changes" comment="Commit auto update files">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/Main.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/board/Board.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/board/BoardGUI.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/board/Cell.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/board/CellButton.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/elements/Building.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/elements/GodCardFrame.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/elements/Worker.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/engine/Game.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/engine/Player.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/godcards/ArtemisGod.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/godcards/DeckInit.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/godcards/DemeterGod.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/godcards/GodCard.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/godcards/GodCardDeck.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/screens/GameScreen.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/screens/Screen.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/screens/ScreenManager.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/screens/TutorialScreen.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/CodingWithGoblins_FIT3077/santorini/screens/WelcomeScreen.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Sprint_Two1/santorini/board/Board.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Sprint_Two1/santorini/board/Board.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Sprint_Two1/santorini/board/BoardGUI.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Sprint_Two1/santorini/board/BoardGUI.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Sprint_Two1/santorini/godcards/ArtemisGod.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Sprint_Two1/santorini/godcards/ArtemisGod.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Sprint_Two1/santorini/godcards/DemeterGod.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Sprint_Two1/santorini/godcards/DemeterGod.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Sprint_Two1/santorini/godcards/GodCard.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Sprint_Two1/santorini/godcards/GodCard.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Sprint_Two1/santorini/screens/GameScreen.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Sprint_Two1/santorini/screens/GameScreen.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Sprint_Two1/santorini/screens/TutorialScreen.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Sprint_Two1/santorini/screens/TutorialScreen.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/santorini/screens/GameScreen.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/santorini/screens/GameScreen.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -21,6 +49,11 @@
     </option>
   </component>
   <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="GameLogic" />
+      </map>
+    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
   <component name="MarkdownSettingsMigration">
@@ -40,7 +73,7 @@
     "Application.Main.executor": "Run",
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "GameLogic",
+    "git-widget-placeholder": "!6 on main",
     "kotlin-language-version-configured": "true",
     "last_opened_file_path": "C:/Users/Tom/IdeaProjects/Santorini",
     "project.structure.last.edited": "Modules",
@@ -81,7 +114,15 @@
       <option name="project" value="LOCAL" />
       <updated>1745951141882</updated>
     </task>
-    <option name="localTasksCounter" value="4" />
+    <task id="LOCAL-00004" summary="Commit auto update files">
+      <option name="closed" value="true" />
+      <created>1746014608850</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1746014608850</updated>
+    </task>
+    <option name="localTasksCounter" value="5" />
     <servers />
   </component>
   <component name="VcsManagerConfiguration">
@@ -89,6 +130,7 @@
     <MESSAGE value="Changes to major files:&#10;- Create child classes of Building abstract class&#10;- Create Action abstract and its action classes which are MoveAction, BuildAction and EndTurnAction.&#10;- Added BoardEventHandler for calling handleCellClick in logicManager.&#10;- Modified BoardGUI, Cell and Game classes&#10;- Added GameLogic and GameLogicManager classes for all the logic of the game.&#10;- Modified TurnManager to keep track of each turn.&#10;&#10;What will be improved:&#10;- Building action and moving action to be done while running.&#10;- Prevent god classes if needed.&#10;- Apply god cards ability into the game for both players.&#10;- Define winning requirement in the game logic." />
     <MESSAGE value="Major Changes #2:&#10;- Implemented the move action of workers.&#10;- The game log displays the status of the game and each action that the players make.&#10;- The game stores turns and players can undo the move action.&#10;- Still working in progress on the build action.&#10;- Commented the GameLogic and TurnManager classes. These classes will be in use as soon as possible for OOP design since the GameLogicManager handles most of the logic and is deemed to become a god class." />
     <MESSAGE value="Major Changes #3:&#10;- Implemented the logic of BuildAction to the main logic of the game.&#10;- The basic logic of the game is done except the winning condition and use of god cards.&#10;- GameLogicManager is to be changed soon due to it being god class." />
-    <option name="LAST_COMMIT_MESSAGE" value="Major Changes #3:&#10;- Implemented the logic of BuildAction to the main logic of the game.&#10;- The basic logic of the game is done except the winning condition and use of god cards.&#10;- GameLogicManager is to be changed soon due to it being god class." />
+    <MESSAGE value="Commit auto update files" />
+    <option name="LAST_COMMIT_MESSAGE" value="Commit auto update files" />
   </component>
 </project>
\ No newline at end of file
